/*
 * OpenADR 3 API
 *
 * The OpenADR 3 API supports energy retailer to energy customer Demand Response programs. The API includes the following capabilities and operations:  __Manage programs:__  * Create/Update/Delete a program * Search programs  __Manage events:__  * Create/Update/Delete an event * Search events  __Manage reports:__  * Create/Update/Delete a report * Search reports  __Manage subscriptions:__  * Create/Update/Delete subscriptions to programs, events, and reports * Search subscriptions * Subscriptions allows clients to register a callback URL (webhook) to be notified   on the change of state of a resource  __Manage vens:__  * Create/Update/Delete vens and ven resources * Search ven and ven resources  __Manage tokens:__  * Obtain an access token * This endpoint is provided as a convenience and may be neglected in a commercial implementation
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: frank@pajaritotech.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};

use crate::wire::values_map::ValuesMap;

use super::{NotificationObject, ObjectTypes};

/// Notification : VTN generated object included in request to subscription callbackUrl.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Notification {
    #[serde(rename = "objectType")]
    pub object_type: ObjectTypes,
    /// the operation on on object that triggered the notification.
    #[serde(rename = "operation")]
    pub operation: Operation,
    #[serde(rename = "object")]
    pub object: Box<NotificationObject>,
    /// A list of valuesMap objects.
    #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
    pub targets: Option<Vec<ValuesMap>>,
}

impl Notification {
    /// VTN generated object included in request to subscription callbackUrl.
    #[allow(dead_code)]
    pub fn new(
        object_type: ObjectTypes,
        operation: Operation,
        object: NotificationObject,
    ) -> Notification {
        Notification {
            object_type,
            operation,
            object: Box::new(object),
            targets: None,
        }
    }
}

/// the operation on on object that triggered the notification.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operation {
    #[serde(rename = "GET")]
    Get,
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "PUT")]
    Put,
    #[serde(rename = "DELETE")]
    Delete,
}

impl Default for Operation {
    fn default() -> Operation {
        Self::Get
    }
}
