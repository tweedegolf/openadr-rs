/*
 * OpenADR 3 API
 *
 * The OpenADR 3 API supports energy retailer to energy customer Demand Response programs. The API includes the following capabilities and operations:  __Manage programs:__  * Create/Update/Delete a program * Search programs  __Manage events:__  * Create/Update/Delete an event * Search events  __Manage reports:__  * Create/Update/Delete a report * Search reports  __Manage subscriptions:__  * Create/Update/Delete subscriptions to programs, events, and reports * Search subscriptions * Subscriptions allows clients to register a callback URL (webhook) to be notified   on the change of state of a resource  __Manage vens:__  * Create/Update/Delete vens and ven resources * Search ven and ven resources  __Manage tokens:__  * Obtain an access token * This endpoint is provided as a convenience and may be neglected in a commercial implementation
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: frank@pajaritotech.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use std::fmt::Display;

/// ObjectTypes : Types of objects addressable through API.

/// Types of objects addressable through API.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ObjectTypes {
    #[serde(rename = "PROGRAM")]
    Program,
    #[serde(rename = "EVENT")]
    Event,
    #[serde(rename = "REPORT")]
    Report,
    #[serde(rename = "SUBSCRIPTION")]
    Subscription,
    #[serde(rename = "VEN")]
    Ven,
    #[serde(rename = "RESOURCE")]
    Resource,
}

impl Display for ObjectTypes {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let str = match self {
            Self::Program => String::from("PROGRAM"),
            Self::Event => String::from("EVENT"),
            Self::Report => String::from("REPORT"),
            Self::Subscription => String::from("SUBSCRIPTION"),
            Self::Ven => String::from("VEN"),
            Self::Resource => String::from("RESOURCE"),
        };
        write!(f, "{}", str)
    }
}

impl Default for ObjectTypes {
    fn default() -> ObjectTypes {
        Self::Program
    }
}
