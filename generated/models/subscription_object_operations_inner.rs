/*
 * OpenADR 3 API
 *
 * The OpenADR 3 API supports energy retailer to energy customer Demand Response programs. The API includes the following capabilities and operations:  __Manage programs:__  * Create/Update/Delete a program * Search programs  __Manage events:__  * Create/Update/Delete an event * Search events  __Manage reports:__  * Create/Update/Delete a report * Search reports  __Manage subscriptions:__  * Create/Update/Delete subscriptions to programs, events, and reports * Search subscriptions * Subscriptions allows clients to register a callback URL (webhook) to be notified   on the change of state of a resource  __Manage vens:__  * Create/Update/Delete vens and ven resources * Search ven and ven resources  __Manage tokens:__  * Obtain an access token * This endpoint is provided as a convenience and may be neglected in a commercial implementation
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: frank@pajaritotech.com
 * Generated by: https://openapi-generator.tech
 */

use crate::generated::models::ObjectTypes;
use serde::{Deserialize, Serialize};

/// SubscriptionObjectOperationsInner : object type, operations, and callbackUrl.

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct SubscriptionObjectOperationsInner {
    /// list of objects to subscribe to.
    #[serde(rename = "objects")]
    pub objects: Vec<ObjectTypes>,
    /// list of operations to subscribe to.
    #[serde(rename = "operations")]
    pub operations: Vec<Operations>,
    /// User provided webhook URL.
    #[serde(rename = "callbackUrl")]
    pub callback_url: String,
    /// User provided token. To avoid custom integrations, callback endpoints should accept the provided bearer token to authenticate VTN requests.
    #[serde(rename = "bearerToken", skip_serializing_if = "Option::is_none")]
    pub bearer_token: Option<String>,
}

impl SubscriptionObjectOperationsInner {
    /// object type, operations, and callbackUrl.
    #[allow(dead_code)]
    pub fn new(
        objects: Vec<ObjectTypes>,
        operations: Vec<Operations>,
        callback_url: String,
    ) -> SubscriptionObjectOperationsInner {
        SubscriptionObjectOperationsInner {
            objects,
            operations,
            callback_url,
            bearer_token: None,
        }
    }
}

/// list of operations to subscribe to.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Operations {
    #[serde(rename = "GET")]
    Get,
    #[serde(rename = "POST")]
    Post,
    #[serde(rename = "PUT")]
    Put,
    #[serde(rename = "DELETE")]
    Delete,
}

impl Default for Operations {
    fn default() -> Operations {
        Self::Get
    }
}
