/*
 * OpenADR 3 API
 *
 * The OpenADR 3 API supports energy retailer to energy customer Demand Response programs. The API includes the following capabilities and operations:  __Manage programs:__  * Create/Update/Delete a program * Search programs  __Manage events:__  * Create/Update/Delete an event * Search events  __Manage reports:__  * Create/Update/Delete a report * Search reports  __Manage subscriptions:__  * Create/Update/Delete subscriptions to programs, events, and reports * Search subscriptions * Subscriptions allows clients to register a callback URL (webhook) to be notified   on the change of state of a resource  __Manage vens:__  * Create/Update/Delete vens and ven resources * Search ven and ven resources  __Manage tokens:__  * Obtain an access token * This endpoint is provided as a convenience and may be neglected in a commercial implementation 
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: frank@pajaritotech.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use super::{Resource, ValuesMap};

/// Ven : Ven represents a client with the ven role.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Ven {
    /// URL safe VTN assigned object ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// datetime in ISO 8601 format
    #[serde(rename = "createdDateTime", skip_serializing_if = "Option::is_none")]
    pub created_date_time: Option<String>,
    /// datetime in ISO 8601 format
    #[serde(rename = "modificationDateTime", skip_serializing_if = "Option::is_none")]
    pub modification_date_time: Option<String>,
    /// Used as discriminator, e.g. notification.object.
    #[serde(rename = "objectType", skip_serializing_if = "Option::is_none")]
    pub object_type: Option<ObjectType>,
    /// User generated identifier, may be VEN identifier provisioned during program enrollment.
    #[serde(rename = "venName")]
    pub ven_name: String,
    /// A list of valuesMap objects describing attributes.
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Vec<ValuesMap>>,
    /// A list of valuesMap objects describing target criteria.
    #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
    pub targets: Option<Vec<ValuesMap>>,
    /// A list of resource objects representing end-devices or systems.
    #[serde(rename = "resources", skip_serializing_if = "Option::is_none")]
    pub resources: Option<Vec<Resource>>,
}

impl Ven {
    /// Ven represents a client with the ven role.
    pub fn new(ven_name: String) -> Ven {
        Ven {
            id: None,
            created_date_time: None,
            modification_date_time: None,
            object_type: None,
            ven_name,
            attributes: None,
            targets: None,
            resources: None,
        }
    }
}

/// Used as discriminator, e.g. notification.object.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ObjectType {
    #[serde(rename = "VEN")]
    Ven,
}

impl Default for ObjectType {
    fn default() -> ObjectType {
        Self::Ven
    }
}

