/*
 * OpenADR 3 API
 *
 * The OpenADR 3 API supports energy retailer to energy customer Demand Response programs. The API includes the following capabilities and operations:  __Manage programs:__  * Create/Update/Delete a program * Search programs  __Manage events:__  * Create/Update/Delete an event * Search events  __Manage reports:__  * Create/Update/Delete a report * Search reports  __Manage subscriptions:__  * Create/Update/Delete subscriptions to programs, events, and reports * Search subscriptions * Subscriptions allows clients to register a callback URL (webhook) to be notified   on the change of state of a resource  __Manage vens:__  * Create/Update/Delete vens and ven resources * Search ven and ven resources  __Manage tokens:__  * Obtain an access token * This endpoint is provided as a convenience and may be neglected in a commercial implementation 
 *
 * The version of the OpenAPI document: 3.0.1
 * Contact: frank@pajaritotech.com
 * Generated by: https://openapi-generator.tech
 */

use serde::{Deserialize, Serialize};
use crate::generated::models::{IntervalPeriod, ProgramPayloadDescriptorsInner, ProgramProgramDescriptionsInner, ValuesMap};

/// Program : Provides program specific metadata from VTN to VEN.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Program {
    /// URL safe VTN assigned object ID.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    /// datetime in ISO 8601 format
    #[serde(rename = "createdDateTime", skip_serializing_if = "Option::is_none")]
    pub created_date_time: Option<String>,
    /// datetime in ISO 8601 format
    #[serde(rename = "modificationDateTime", skip_serializing_if = "Option::is_none")]
    pub modification_date_time: Option<String>,
    /// Used as discriminator, e.g. notification.object
    #[serde(rename = "objectType", skip_serializing_if = "Option::is_none")]
    pub object_type: Option<ObjectType>,
    /// Short name to uniquely identify program.
    #[serde(rename = "programName")]
    pub program_name: String,
    /// Long name of program for human readability.
    #[serde(rename = "programLongName", skip_serializing_if = "Option::is_none")]
    pub program_long_name: Option<String>,
    /// Short name of energy retailer providing the program.
    #[serde(rename = "retailerName", skip_serializing_if = "Option::is_none")]
    pub retailer_name: Option<String>,
    /// Long name of energy retailer for human readability.
    #[serde(rename = "retailerLongName", skip_serializing_if = "Option::is_none")]
    pub retailer_long_name: Option<String>,
    /// A program defined categorization.
    #[serde(rename = "programType", skip_serializing_if = "Option::is_none")]
    pub program_type: Option<String>,
    /// Alpha-2 code per ISO 3166-1.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// Coding per ISO 3166-2. E.g. state in US.
    #[serde(rename = "principalSubdivision", skip_serializing_if = "Option::is_none")]
    pub principal_subdivision: Option<String>,
    /// duration in ISO 8601 format
    #[serde(rename = "timeZoneOffset", skip_serializing_if = "Option::is_none")]
    pub time_zone_offset: Option<String>,
    #[serde(rename = "intervalPeriod", skip_serializing_if = "Option::is_none")]
    pub interval_period: Option<Box<IntervalPeriod>>,
    /// A list of programDescriptions
    #[serde(rename = "programDescriptions", skip_serializing_if = "Option::is_none")]
    pub program_descriptions: Option<Vec<ProgramProgramDescriptionsInner>>,
    /// True if events are fixed once transmitted.
    #[serde(rename = "bindingEvents", skip_serializing_if = "Option::is_none")]
    pub binding_events: Option<bool>,
    /// True if events have been adapted from a grid event.
    #[serde(rename = "localPrice", skip_serializing_if = "Option::is_none")]
    pub local_price: Option<bool>,
    /// A list of payloadDescriptors.
    #[serde(rename = "payloadDescriptors", skip_serializing_if = "Option::is_none")]
    pub payload_descriptors: Option<Vec<ProgramPayloadDescriptorsInner>>,
    /// A list of valuesMap objects.
    #[serde(rename = "targets", skip_serializing_if = "Option::is_none")]
    pub targets: Option<Vec<ValuesMap>>,
}

impl Program {
    /// Provides program specific metadata from VTN to VEN.
    pub fn new(program_name: String) -> Program {
        Program {
            id: None,
            created_date_time: None,
            modification_date_time: None,
            object_type: None,
            program_name,
            program_long_name: None,
            retailer_name: None,
            retailer_long_name: None,
            program_type: None,
            country: None,
            principal_subdivision: None,
            time_zone_offset: None,
            interval_period: None,
            program_descriptions: None,
            binding_events: None,
            local_price: None,
            payload_descriptors: None,
            targets: None,
        }
    }
}

/// Used as discriminator, e.g. notification.object
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ObjectType {
    #[serde(rename = "PROGRAM")]
    Program,
}

impl Default for ObjectType {
    fn default() -> ObjectType {
        Self::Program
    }
}

